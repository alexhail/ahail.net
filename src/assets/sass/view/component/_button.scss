$red: #f00;
$orange: #ff9c1c;
$yellow: yellow;
$green: #00ff64;
$blue: #007cff;
$purple: #9b0aff;

$synth_bg: rgb(18, 18, 18);
$synth_gradient_border_size: 1px;
$synth_width: 128px;
$synth_height: 45px;
$synth_size_ratio: $synth_width / $synth_height;
$synth_container_width: $synth_width + ($synth_gradient_border_size*2);
$synth_container_height: $synth_height + ($synth_gradient_border_size*2);
$synth_gradient_size: 45px;
$synth_blip_size: 2%;
$synth_blip_hardness: 5%;
$synth_gradient: linear-gradient(to left, $red, $orange, $yellow, $green, $blue, purple, $red);
$synth_gradient_shadow: linear-gradient(to bottom, $red, $orange);
$synth_gradient_blip: linear-gradient(180deg,
                                      transparent 0%,
                                      transparent calc(50% - $synth_blip_size - $synth_blip_hardness),
                                      white calc(50% - $synth_blip_size),
                                      white 50%,
                                      white calc(50% + $synth_blip_size),
                                      transparent calc(50% + $synth_blip_size + $synth_blip_hardness),
                                      transparent 100%);
$synth_gradient_inset_box_shadow_min: inset 0 0 750px 750px #0a0a0a;
$synth_gradient_inset_box_shadow_max: inset 0 0 550px 550px #0a0a0a;
$synth_gradient_shadow_container_size: calc($synth_width + ($synth_gradient_size * 4));

$synth_gradient_animation_duration: 10s;
$synth_gradient_shadow_rotation_duration: $synth_gradient_animation_duration * 2;

button, .button {
  position: relative;
  display: inline-block;
  width: $synth_container_width;
  height: $synth_container_height;
  cursor: pointer;

  &.button-danger {
    color: color("white");
    background-color: color("red");

    &:hover {
      background-color: color("red", $lightness: -5%);
    }
  }

  &.large {
    font-size: 16px;
    padding: 15px 30px;
  }

  &.medium {
    font-size: 16px;
    padding: 12px 15px;
  }

  &.rounded {
    border-radius: 10px;

    &.rounded-sharp {
      border-radius: 5px;
    }
  }

  &.outlined {
    border: 4px solid rgba(0,0,0,0.15);
    box-sizing: border-box;

    &.outline-small {
      border-width: 2px;
    }
  }

  &.black {
    background-color: color("black");

    &:hover {
      background-color: color("black", $lightness: -5%);
    }
  }

  &.white {
    background-color: color("white");

    &:hover {
      background-color: color("white", $lightness: -5%);
    }
  }

  &.red {
    background-color: color("red");

    &:hover {
      background-color: color("red", $lightness: -5%);
    }
  }

  &.green {
    background-color: color("green");

    &:hover {
      background-color: color("green", $lightness: -5%);
    }
  }

  &.blue {
    background-color: color("blue");

    &:hover {
      background-color: color("blue", $lightness: -5%);
    }
  }

  &.orange {
    background-color: color("orange");

    &:hover {
      background-color: color("orange", $lightness: -5%);
    }
  }

  &.yellow {
    background-color: color("yellow");

    &:hover {
      background-color: color("yellow", $lightness: -5%);
    }
  }

  &.gold {
    background-color: color("gold");

    &:hover {
      background-color: color("gold", $lightness: -5%);
    }
  }

  &.purple {
    background-color: color("purple");

    &:hover {
      background-color: color("purple", $lightness: -5%);
    }
  }

  &.gray {
    background-color: color("gray");

    &:hover {
      background-color: color("gray", $lightness: -5%);
    }
  }

  // These are default but class is provided to override
  &.theme-color-primary {
    background-color: color("theme-color-primary");

    &:hover {
      background-color: color("theme-color-primary", $lightness: -5%);
    }
  }

  &.theme-color-secondary {
    background-color: color("theme-color-secondary");

    &:hover {
      background-color: color("theme-color-secondary", $lightness: -5%);
    }
  }

  &.font-color-primary {
    background-color: color("font-color-primary");

    &:hover {
      background-color: color("font-color-primary", $lightness: -5%);
    }
  }

  &.font-color-secondary {
    background-color: color("font-color-secondary");

    &:hover {
      background-color: color("font-color-secondary", $lightness: -5%);
    }
  }

  &.background-color-primary {
    background-color: color("background-color-primary");

    &:hover {
      background-color: color("background-color-primary", $lightness: -5%);
    }
  }

  &.background-color-secondary {
    background-color: color("background-color-secondary");

    &:hover {
      background-color: color("background-color-secondary", $lightness: -5%);
    }
  }

  &.background-color-tertiary {
    background-color: color("background-color-tertiary");

    &:hover {
      background-color: color("background-color-tertiary", $lightness: -5%);
    }
  }

  .button-container {
    position: absolute;
    display: block;
    width: $synth_container_width;
    height: $synth_container_height;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    overflow: hidden;
    z-index: 1;

    .button-content {
      position: absolute;
      display: flex;
      font-size: 14px;
      padding: 10px 35px;
      top: $synth_gradient_border_size;
      left: $synth_gradient_border_size;
      width: $synth_width;
      height: $synth_height;
      background: rgba(0, 0, 0, 1);
      color: color("font-color-primary");
      justify-content: center;
      align-content: center;
      align-items: center;
      cursor: pointer;
    
      &:hover {
        transition: box-shadow 0.35s ease-out;
        //background: rgba(0, 0, 0, 1);
        box-shadow: 0px 0px 8px 8px rgba(255,255,255,0.25);
      }
    }

    &::before {
      content: '';
      position: absolute;
      display: block;
      top: 50%;
      left: 50%;
      width: calc($synth_container_width + 80px);
      height: calc($synth_container_width + 80px);
      transform-origin: center center;
      transform: translate(-50%, -50%);
      //background: $synth_gradient;
      animation: rotate $synth_gradient_animation_duration linear infinite normal forwards;
      z-index: -2;
    }

    &::after {
      content: '';
      position: absolute;
      display: block;
      top: 50%;
      left: 50%;
      width: calc($synth_container_width + 80px);
      height: calc($synth_container_width + 80px);
      transform-origin: center left;
      transform: translate(0%, -50%);
      background: $synth_gradient_blip;
      animation: rotate_blip $synth_gradient_animation_duration linear normal both infinite,
                      appear_blip 5s ease-in-out alternate both infinite;
      animation-delay: 1s, 12s;
      opacity: 0;
      z-index: -1;
    }

    
  }

  @for $i from 1 through 10 {
    &:nth-of-type(#{$i}) .button-container {
      &::after, &::before {
        animation-delay: calc(1 + ($i*0.6)) * 1s, 1s;
        animation-direction: if($i % 2 == 0, reverse, normal), alternate !important;
      }
    }
  }

  @keyframes rotate {
    100% {
      transform: translate(-50%, -50%) rotateZ(360deg);
    }
  }

  @keyframes rotate_blip {
    100% {
      transform: translate(0%, -50%) rotateZ(360deg);
    }
  }

  @keyframes appear_blip {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
}